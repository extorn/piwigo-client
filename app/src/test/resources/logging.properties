# Note: Configuration properties are applied in the sequence they are listed in the config file.
# That means, that you should configure parent Logger's before child Logger's.
# Otherwise the configuration of the parent Logger will override that of the child Logger.

# A white space or comma separated list of handler class names to be added to the root Logger
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler
# class(es) instantiated with the logging framework
#config   =
#Sets the handler classes to use for a given Logger in the hierarchy.
# Replace the "logger" with a specific name of a Logger in your app (e.g. com.jenkov.web).
#"logger".handlers           =
#"logger".useParentHandlers  =
#"logger".level              =



# Sets the default log level for all FileHandler's.
java.util.logging.FileHandler.level     = FINE
# A class name of the Formatter to use on all FileHandler's.
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
# The encoding to use by all FileHandler's (e.g. UTF-8, UTF-16 etc.).
java.util.logging.FileHandler.encoding  = UTF-16
# A class name of the Filter to use on all FileHandler's.
#java.util.logging.FileHandler.filter    =
# The approximate amount of bytes to write to a log file, before rotating to a new file.
#java.util.logging.FileHandler.limit     =
# The number of log files to use in the log file rotation.
java.util.logging.FileHandler.count     = 10
# Sets whether or not the FileHandler's should append to an existing file or not (true or false), if an existing log file is found.
java.util.logging.FileHandler.append    = false
# The log file name pattern.
java.util.logging.FileHandler.pattern   = log.%u.%g.txt



java.util.logging.ConsoleHandler.level     = ALL
#java.util.logging.ConsoleHandler.filter    =
# A class name of the Formatter to use on all ConsoleHandler's.
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
#java.util.logging.ConsoleHandler.encoding  =

#java.util.logging.StreamHandler.level     = WARNING
#java.util.logging.StreamHandler.filter    =
#java.util.logging.StreamHandler.formatter =
#java.util.logging.StreamHandler.encoding  =

#java.util.logging.SocketHandler.level     = WARNING
#java.util.logging.SocketHandler.filter    =
#java.util.logging.SocketHandler.formatter =
#java.util.logging.SocketHandler.encoding  =
# Sets the host name of the host to send the log messages to (e.g. jenkov.com).
#java.util.logging.SocketHandler.host      =
# Sets the port number of of the host to send the log message to (e.g. 9999).
#java.util.logging.SocketHandler.port      =

#java.util.logging.MemoryHandler.level     = WARNING
#java.util.logging.MemoryHandler.filter    =
# The size of the internal LogRecord buffer.
#java.util.logging.MemoryHandler.size      =
# The push level of messages causing the buffer to be pushed to the target Handler. Defaults to SEVERE.
#java.util.logging.MemoryHandler.push      =
# The class name of the target Handler.
#java.util.logging.MemoryHandler.target    =

# Log output format for each entry of the FileHandler
java.util.logging.SimpleFormatter.format=[%1$tF %1$tT] [%4$s] %5$s %n

delit = ALL 
#delit.translator.android.level = INFO
#delit.translator.engine.BaseTranslationEngine.level = WARNING
#delit.translator.recorder.level = INFO
