apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

//apply plugin: 'com.google.android.gms.strict-version-matcher-plugin'

android {

    signingConfigs {
        config {
            keyAlias 'piwigo-client-upload-key'
            keyPassword 'twkbmp'
            storeFile file('C:\\Users\\Garet\\android-app-keys.jks')
            //storeFile file('/home/gareth/Android/android-app-keys.jks')
            storePassword 'twkbmp'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildToolsVersion '30.0.3'
    compileSdkVersion 30

    defaultConfig {
        //NB: non standard fields must be defined (def)
        versionCode 347
        versionName "1.4.0.103"
        applicationId "delit.piwigoclient"

        def latestPiwigoClientWsPluginVersion = "1.0.13"

        buildConfigField "String", "PIWIGO_CLIENT_WS_VERSION", "\"${latestPiwigoClientWsPluginVersion}\""

        minSdkVersion 19
        targetSdkVersion 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        signingConfig signingConfigs.config
        // Enabling multidex support.
        multiDexEnabled true
        multiDexKeepProguard file('multidex_keep_file.pro')

        // configure room options
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = "FULL"
        }
        debug {
            versionNameSuffix = "-DEBUG"
            /*
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            */
        }
    }
    lintOptions {
        checkReleaseBuilds true
        // disable 'MissingTranslation'
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    flavorDimensions "tier"


    productFlavors {
        free {
            // this is important - will be null otherwise
            applicationIdSuffix ""
            ext {
                isPaidVersion = false
            }

            // Assigns this product flavor to the "tier" flavor dimension. Specifying
            // this property is optional if you are using only one dimension.
            dimension "tier"
        }
        paid {
            applicationIdSuffix ".paid"
            ext {
                isPaidVersion = true
            }
            //.phone when debugging on phone so separate install.

            // Assigns this product flavor to the "tier" flavor dimension. Specifying
            // this property is optional if you are using only one dimension.
            dimension "tier"
        }

        paidphone {
            applicationIdSuffix ".paid.phone"
            ext {
                isPaidVersion = true
            }


            //.phone when debugging on phone so separate install.
            // Assigns this product flavor to the "tier" flavor dimension. Specifying
            // this property is optional if you are using only one dimension.
            dimension "tier"
        }
        /*bundle {
            language {
                enableSplit = false
            }
        }*/
        applicationVariants.all { variant ->
            def flav = variant.getProductFlavors()
                    .findAll({ flavor -> flavor.dimension == "tier"})
                    .get(0)
            def filesAuthorityValue = "${defaultConfig.applicationId}${flav.applicationIdSuffix}.provider"
            def documentsAuthorityValue = "${defaultConfig.applicationId}${flav.applicationIdSuffix}.provider.docs"

            mergedFlavor.manifestPlaceholders = [ filesAuthority: "${filesAuthorityValue}",
                                     documentsAuthority: "${documentsAuthorityValue}" ]

            // this boolean can be accessed in java classes by using BuildConfig class
            // and now you can identify if your app is the paid version or not

            variant.buildConfigField "String", "FILE_PROVIDER_AUTHORITY", "\"${filesAuthorityValue}\""
            variant.buildConfigField "String", "DOCUMENTS_PROVIDER_AUTHORITY", "\"${documentsAuthorityValue}\""
            variant.buildConfigField "boolean", "PAID_VERSION", "${flav.ext.isPaidVersion}"
        }
    }

    sourceSets {
        paidphone {
            java.srcDirs = sourceSets.paid.java.srcDirs
            res.srcDirs = sourceSets.paid.res.srcDirs
            resources.srcDirs = sourceSets.paid.resources.srcDirs
            aidl.srcDirs = sourceSets.paid.aidl.srcDirs
            renderscript.srcDirs = sourceSets.paid.renderscript.srcDirs
            assets.srcDirs = sourceSets.paid.assets.srcDirs
            manifest.srcFile(sourceSets.paid.manifest.srcFile)
        }
    }
    testOptions {
        // Encapsulates options for local unit tests.
        unitTests {
            // By default, local unit tests throw an exception any time the code you are testing tries to access
            // Android platform APIs (unless you mock Android dependencies yourself or with a testing
            // framework like Mockito). However, you can enable the following property so that the test
            // returns either null or zero when accessing platform APIs, rather than throwing an exception.
            //returnDefaultValues true
        }
    }
            ndkVersion '21.3.6528147'

}


dependencies {
    // room database persistence libs used to track files previously uploaded
    def room_version = "2.2.6"

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.3'

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor


    implementation project(path: ':google-licencing-library')
    implementation project(path: ':delit-ui-libs')
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // third party libraries
    //    compile 'com.squareup.okhttp:okhttp:1.6.0'
    //    compile 'com.squareup.okhttp:okhttp-urlconnection:1.6.0'
    implementation 'com.github.MikeOrtiz:TouchImageView:3.0.1' // am extending this file locally (check if my functionality is now in the release v)
    //implementation ('com.squareup.picasso:picasso:2.5.2')
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.github.hotchemi:android-rate:1.0.1'
    implementation 'com.loopj.android:android-async-http:1.4.9'

    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.19'



    // parse and edit exif and IPTC etc information
    implementation 'com.drewnoakes:metadata-extractor:2.15.0'

    // prevent side loading (validate if this is attempted)
    implementation 'com.google.android.play:core:1.9.0'
    //implementation 'com.google.android.gms:play-services-cast-framework:18.1.0'
    // drawers, snackbars etc
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'com.google.android.gms:play-services-ads:19.7.0'
    implementation 'com.google.android.ads.consent:consent-library:1.0.8'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.8.2'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.8.2'
    //implementation 'com.google.android.exoplayer:exoplayer-dash:2.8.2'
    //implementation 'com.google.android.exoplayer:exoplayer-hls:2.8.2'
    //implementation 'com.google.android.exoplayer:exoplayer-smoothstreaming:2.8.2'
    implementation 'com.google.android.gms:play-services-tasks:17.2.0'
    implementation 'com.google.android.gms:play-services-base:17.5.0'
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'
    implementation 'com.google.code.gson:gson:2.8.6'

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:26.2.0')
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-iid'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-perf'

    // vector graphics support
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    // annotations support
    implementation 'androidx.annotation:annotation:1.1.0'
    // custom tab support
    implementation 'androidx.browser:browser:1.3.0'
    //EXIF Support
    implementation 'androidx.exifinterface:exifinterface:1.3.2'
    // v7 appcompat stuff
    implementation 'androidx.mediarouter:mediarouter:1.2.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    // v14 stuff
    implementation 'androidx.transition:transition:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout-solver:2.0.4' //2.0.0-alpha2
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4' //2.0.0-alpha2
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'

    // android mp4 streaming header generator library
    implementation 'net.ypresto.qtfaststartjava:qtfaststart:0.1.0'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'id.zelory:compressor:2.1.0' //3.0.x is kotlin. Need to learn that to use it!

    implementation project(path: ':delit-core-libs')// image compression library apache2

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    // test too large bundle sizes!
    //implementation 'com.gu.android:toolargetool:0.2.1@aar'
    //implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.31'
    // example of use: adb logcat -s TooLargeTool
}
